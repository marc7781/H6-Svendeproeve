// <auto-generated />
using System;
using ApiDBlayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiDBlayer.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20241122111954_addressOptional")]
    partial class addressOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbModels.DtoOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<int?>("DtoUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TruckTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("DtoUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TruckTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DbModels.DtoRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DtoUserId")
                        .HasColumnType("int");

                    b.Property<int>("Ratings")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DtoUserId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("DbModels.DtoTruckType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Trucktype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TruckTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Trucktype = "Lastbil"
                        },
                        new
                        {
                            Id = 2,
                            Trucktype = "Varebil"
                        });
                });

            modelBuilder.Entity("DbModels.DtoUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Driver")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<int>("TruckTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserCredentialsId")
                        .HasColumnType("int");

                    b.Property<int>("UserInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TruckTypeId");

                    b.HasIndex("UserCredentialsId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Driver = true,
                            OrderId = 0,
                            RatingId = 0,
                            TruckTypeId = 1,
                            UserCredentialsId = 1,
                            UserInfoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Driver = false,
                            OrderId = 0,
                            RatingId = 0,
                            TruckTypeId = 0,
                            UserCredentialsId = 2,
                            UserInfoId = 2
                        });
                });

            modelBuilder.Entity("DbModels.DtoUserCredentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users_credentials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "$2a$12$F4AMp7JgfE05JlEhpkNZc./kr1LiR27Pm28O4M8mR9QrASYYnb1XO"
                        },
                        new
                        {
                            Id = 2,
                            Password = "$2a$12$JaBadjoD5fqhKjI.Algi7.fAGmMxVdgzGOAWn8imtJ9E9m6dgcbBa"
                        });
                });

            modelBuilder.Entity("DbModels.DtoUserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone_number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User_Infos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Viborg",
                            Email = "simon@gmail.com",
                            Name = "Simon",
                            Phone_number = 88888888
                        },
                        new
                        {
                            Id = 2,
                            Address = "Fjelstervang",
                            Email = "marcus@gmail.com",
                            Name = "Marcus",
                            Phone_number = 12345678
                        });
                });

            modelBuilder.Entity("DbModels.DtoOrder", b =>
                {
                    b.HasOne("DbModels.DtoUser", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DbModels.DtoUser", null)
                        .WithMany("Order")
                        .HasForeignKey("DtoUserId");

                    b.HasOne("DbModels.DtoUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DbModels.DtoTruckType", "TruckType")
                        .WithMany()
                        .HasForeignKey("TruckTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Owner");

                    b.Navigation("TruckType");
                });

            modelBuilder.Entity("DbModels.DtoRating", b =>
                {
                    b.HasOne("DbModels.DtoUser", null)
                        .WithMany("Ratings")
                        .HasForeignKey("DtoUserId");

                    b.HasOne("DbModels.DtoUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DbModels.DtoUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DbModels.DtoUser", b =>
                {
                    b.HasOne("DbModels.DtoTruckType", "TruckType")
                        .WithMany()
                        .HasForeignKey("TruckTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.DtoUserCredentials", "UserCredentials")
                        .WithMany()
                        .HasForeignKey("UserCredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.DtoUserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TruckType");

                    b.Navigation("UserCredentials");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("DbModels.DtoUser", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
